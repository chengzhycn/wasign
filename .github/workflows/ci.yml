name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and quality checks
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.24, 1.25]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Run linter
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

      - name: Run security checks
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec ./...

      - name: Check for vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # Build for multiple platforms
  build:
    name: Build Multi-Platform
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            target: linux-amd64
          - os: linux
            arch: arm64
            target: linux-arm64
          - os: darwin
            arch: amd64
            target: darwin-amd64
          - os: darwin
            arch: arm64
            target: darwin-arm64
          - os: windows
            arch: amd64
            target: windows-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Get version info
        id: version
        run: |
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
          COMMIT_HASH=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT

      - name: Build binary
        run: |
          mkdir -p bin
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} CGO_ENABLED=0 go build \
            -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.CommitHash=${{ steps.version.outputs.commit_hash }} -X main.BuildTime=${{ steps.version.outputs.build_time }} -w -s" \
            -o bin/go-cli-template-${{ matrix.target }}${{ matrix.os == 'windows' && '.exe' || '' }} \
            ./main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: go-cli-template-${{ matrix.target }}
          path: bin/go-cli-template-${{ matrix.target }}${{ matrix.os == 'windows' && '.exe' || '' }}

  # Create release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v3

      - name: Create release archive
        run: |
          mkdir -p release
          cd go-cli-template-linux-amd64
          tar -czf ../../release/go-cli-template-linux-amd64.tar.gz go-cli-template-linux-amd64
          cd ../go-cli-template-linux-arm64
          tar -czf ../../release/go-cli-template-linux-arm64.tar.gz go-cli-template-linux-arm64
          cd ../go-cli-template-darwin-amd64
          tar -czf ../../release/go-cli-template-darwin-amd64.tar.gz go-cli-template-darwin-amd64
          cd ../go-cli-template-darwin-arm64
          tar -czf ../../release/go-cli-template-darwin-arm64.tar.gz go-cli-template-darwin-arm64
          cd ../go-cli-template-windows-amd64
          tar -czf ../../release/go-cli-template-windows-amd64.tar.gz go-cli-template-windows-amd64.exe

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and push Docker image
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            REGISTRY=${{ env.REGISTRY }}
            VERSION=${{ steps.meta.outputs.version }}
            IMAGE_NAME=${{ env.IMAGE_NAME }}

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
